{"version":3,"sources":["Shape.js","App.js","serviceWorker.js","index.js"],"names":["Shape","props","shape","selectShape","react_default","a","createElement","className","onClick","Selector","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSelectShape","shapeName","setState","selectedShape","squareCount","state","circleCount","triangleCount","trapeziumCount","starCount","ovalCount","handleReset","alert","handleSquareCount","src_Shape","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d58dee8.chunk.js","sourcesContent":["//Function  (stateless functional component)\r\n//no local state\r\n\r\nimport React from 'react'\r\n\r\nconst Shape = (props) => { //props are values located in app.js\r\n\r\n    const shape = props.shape; //props.shape values are square, circle, triangle, and so on\r\n    const selectShape = props.selectShape; //selectShape method in app.js stored as a value in this variable\r\n\r\n    return (\r\n\r\n        //onClick fires when shape is clicked by user on browser, calls an anonymous function \r\n        //this anonymous fn takes in shape name of figure clicked, changing state (value of shapeName) of selectedShape value in app.js, which is then displayed between span in .text h1 and in browser\r\n        <div className = {shape} onClick = {() => selectShape(shape)} ></div>\r\n        //can also be rewritten as <div className = {shape} onClick = {() => selectShape(shape)} />\r\n    );\r\n}\r\n\r\nexport default Shape;","import React, { Component } from 'react'\nimport Shape from './Shape';\n\n//stateful/class component\nclass Selector extends Component {\n  constructor(){\n    super();\n    this.state = {\n      selectedShape : ' Shape?', //initialized with a value and data type, which in this case is a string value for selectedShape (key)\n\n      //counters for each shape figure, initialized at zero\n      squareCount: 0,\n      circleCount: 0,\n      triangleCount: 0,\n      trapeziumCount: 0,\n      starCount: 0,\n      ovalCount: 0\n    \n    };\n  }\n\n//=======[EVENTS]============  \n//below allows for shape data to change due to value passed as parameter...this is a method\n  handleSelectShape = (shapeName) => {\n    this.setState({\n      selectedShape: shapeName\n    });\n\n    //below keeps count of the number of times the shape was clicked\n    if(shapeName == 'square') {\n      this.setState({\n        squareCount: this.state.squareCount + 1\n      });\n      } else if(shapeName == 'circle') {\n        this.setState({\n          circleCount: this.state.circleCount + 1\n        });\n        } else if(shapeName == 'triangle') {\n          this.setState({\n            triangleCount: this.state.triangleCount + 1\n          });} else if(shapeName == 'trapezium') {\n            this.setState({\n              trapeziumCount: this.state.trapeziumCount + 1\n            });\n            } else if(shapeName == 'star') {\n              this.setState({\n                starCount: this.state.starCount + 1\n              });\n              } else {\n                this.setState({\n                  ovalCount: this.state.ovalCount + 1\n                });\n              } \n  }\n\n  handleReset = () => {\n    this.setState({\n      squareCount: 0,\n      circleCount: 0,\n      triangleCount: 0,\n      trapeziumCount: 0,\n      starCount: 0,\n      ovalCount: 0\n    }, alert('Memory Wiped! Meet These Shapes Again!'))\n  }\n\n//in the Shape component in jsx below, the selectShape attribute is calling the above handleSelectShape method to change local state data\n//this allows for this.state.selectedShape in 'This is called a shape?!' to change on click of various shape figures on browser page\n\n//state and props are objects with key/value pairs\n\n  handleSquareCount = () => {\n    this.setState({squareCount: this.state.squareCount + 1})\n  }\n\n  //=======[RENDER]============\n  render(){\n    //shape = \"shape/square/circle/triangle/etc\" is a shape property/key with a value. This becomes props in Shape.js/functional component as a parameter to be passed through function\n    \n    return (\n      <div className = \"container\">\n        <div className =\"navbar\">\n          <h1 className = \"hello\">HELLO</h1>\n          <h2 className =\"text\">My Name Is <br />\n          <span className = \"figureName\" >{this.state.selectedShape}</span>!</h2>\n        </div>\n        \n        <div className =\"shape-list\">\n          <div className=\"row\">\n          <Shape shape=\"square\" className=\"shape\" selectShape = {this.handleSelectShape} /> \n          <Shape shape=\"circle\" className=\"shape\" selectShape = {this.handleSelectShape}/>\n          <Shape shape=\"triangle\" className=\"shape\" selectShape = {this.handleSelectShape}/>\n          </div>\n\n          <div className=\"row\">\n          <Shape shape=\"trapezium\" className=\"shape\" selectShape = {this.handleSelectShape}/>\n          <Shape shape=\"star\" className=\"shape\" selectShape = {this.handleSelectShape}/>\n          <Shape shape=\"oval\" className=\"shape\" selectShape = {this.handleSelectShape}/>\n          </div>\n\n        </div>\n\n        <div className=\"footer\">\n          <h1 className=\"text\"> You have met {this.state.squareCount} square(s), {this.state.circleCount} circle(s), {this.state.triangleCount} triangle(s), {this.state.trapeziumCount} trapezium(s), {this.state.starCount} star(s), and {this.state.ovalCount} oval(s) today!</h1>\n\n          <h1 class=\"text erase\" onClick = {this.handleReset}>Neuralyzer</h1> \n        </div>\n\n      </div>\n    );\n    \n  }\n\n}\nexport default Selector;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}